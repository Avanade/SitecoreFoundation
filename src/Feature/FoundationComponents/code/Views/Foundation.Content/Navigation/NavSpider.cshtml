@using Sitecore.Mvc.Presentation
@using Sitecore.Mvc
@using SF.Foundation.Container
@using SF.Foundation.Structure
@using SF.Foundation.Components
@using SF.Feature.FoundationComponents;

@{
    //Using Rendering Parameters instead of item to avoid caching issue for active item. Cache by data source/current page
    //will result in proper behavior.                     
    var rootItemId = Html.GetRenderingParameter("RootItem");
    Sitecore.Data.Items.Item rootItem = null;
    if (!string.IsNullOrEmpty(rootItemId))
    {
        rootItem = Sitecore.Context.Database.GetItem(rootItemId);
    }
    
    bool includeRootItem = Html.GetCheckboxRenderingParameterValue("IncludeRootItem");
    
}

@if (rootItem == null)
{
    if (Sitecore.Context.PageMode.IsExperienceEditorEditing)
    {
        <li>Please set root item under rendering parameters.</li>
    }
    else
    {
        <!-- Root Item not specified. -->
    }
}
else
{

    if (includeRootItem)
    {
        @RenderItem(rootItem, 1)
    }
    else
    {
        var rootChildren = rootItem.Children.GetNavigableChildItems();
        if (rootChildren.Count == 0)
        {
            <!-- No Children Exist for Spider -->
        }
        foreach (var item in rootChildren)
        {
            @RenderItem(item, 1)
        }
    }
}

@helper RenderItem(Sitecore.Data.Items.Item item, int depth)
{
    bool includeBackLink = Html.GetCheckboxRenderingParameterValue("IncludeBackLink");
    string backLinkText = Html.GetRenderingParameter("BackLinkText");
    string displayNameField = Html.GetRenderingParameter("DisplayNameField");
    int maxDepth = int.Parse(Html.GetRenderingParameter("MaxDepth"));
    bool rightAligned = Html.GetCheckboxRenderingParameterValue("RightAligned");
    bool includeParentLinkInSubmenu = Html.GetCheckboxRenderingParameterValue("IncludeParentLinkInSubmenu");



    var isCurrent = string.Empty;
    var hasLayout =  string.Empty;
    var hasChildren =  string.Empty;
    bool hasAttributes = false;

    if (item.IsCurrentItem())
    {
        isCurrent = @"current";
    }
    if (!item.HasLayout())
    {
        hasLayout = @"unavailable";
    }

    var children = item.Children.GetNavigableChildItems();
    if (children.Count > 0 && depth < maxDepth)
    {
        hasChildren = "has-dropdown";
    }

    string attributes = string.Format(@"{0} {1} {2}", isCurrent, hasLayout, hasChildren);

    var displayName = item.DisplayName;
    if (!string.IsNullOrEmpty(displayNameField) && item.HasField(displayNameField))
    {
        displayName = item.Fields[displayName].Value;
    }

    <li @Html.GetContainerTagAttributes(attributes)> <a href="@item.GetItemUrl()">@displayName</a>
    @{

        if (depth < maxDepth)
     {
        if (children.Count > 0)
        {
            var ulClass = "dropdown";
            <ul class="@ulClass">
                @if (includeBackLink)
                {
                    <li class="back"><a href="#">@backLinkText</a></li>
                }
                @if (includeParentLinkInSubmenu)
                {
                    attributes = string.Format(@"parent-submenu-link {0} {1}", isCurrent, hasLayout);
                    <li class="@attributes"><a href="@item.GetItemUrl()">@displayName</a></li>
                }
                @foreach (Sitecore.Data.Items.Item childItem in children)
                {
                    @RenderItem(childItem, depth+1)
                }
            </ul>
        }
      }
    }
    </li>

}