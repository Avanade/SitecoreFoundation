@using Sitecore.Mvc.Presentation
@using Sitecore.Mvc
@using SF.Foundation.CommonComponents
@using SF.Foundation.Container

@{    
    Sitecore.Data.Fields.LinkField mp4 = (Sitecore.Data.Fields.LinkField) Model.Item.Fields["mp4"];
    Sitecore.Data.Fields.LinkField webm = (Sitecore.Data.Fields.LinkField) Model.Item.Fields["webm"];
    Sitecore.Data.Fields.LinkField ogg = (Sitecore.Data.Fields.LinkField) Model.Item.Fields["ogg"];

    string mp4Url = mp4.GetFriendlyUrl();
    string webmUrl = webm.GetFriendlyUrl();
    string oggUrl = ogg.GetFriendlyUrl();

    
    bool autoPlay = ((Sitecore.Data.Fields.CheckboxField)Model.Item.Fields["AutoPlay"]).Checked;
    string preload = Model.Item.Fields["Preload"].Value;
    string poster = ((Sitecore.Data.Fields.LinkField) Model.Item.Fields["Poster"]).GetFriendlyUrl();
    bool loop = ((Sitecore.Data.Fields.CheckboxField)Model.Item.Fields["Loop"]).Checked;

    int width = 0;
    int.TryParse(Model.Item.Fields["Width"].Value, out width);

    int height = 0;
    int.TryParse(Model.Item.Fields["Height"].Value, out height);
    
    bool centerBigPlayButton = ((Sitecore.Data.Fields.CheckboxField)Model.Item.Fields["CenterBigPlayButton"]).Checked;
    
    string notSupportedMessage = Model.Item.Fields["NotSupportedMessage"].Value;
    string additionalSetupOptions = Model.Item.Fields["AdditionalSetupOptions"].Value;

    string videoTagCSS = @"video-js vjs-default-skin";
    if (centerBigPlayButton)
    {
        videoTagCSS += " vjs-big-play-centered"; 
    }

    System.Text.StringBuilder sb = new System.Text.StringBuilder();
    sb.Append("controls ");
    if (autoPlay)
    {
        sb.Append("autoplay ");
    }
    
    if (!string.IsNullOrEmpty(preload))
    {
        sb.Append(@"preload=").Append(preload).Append(@" ");
    }
    
    if (!string.IsNullOrEmpty(poster))
    {
        sb.Append(@"poster=").Append(poster).Append(@" ");   
    }
    
    if (loop)
    {
        sb.Append("loop ");
    }
    
    if (width > 0)
    {
        sb.Append(@"width=").Append(width).Append(@" ");   
    }

    if (height > 0)
    {
        sb.Append(@"height=").Append(height).Append(@" ");
    }
    
    if (!string.IsNullOrEmpty(additionalSetupOptions))
    {
        sb.Append(@"data-setup='").Append(additionalSetupOptions).Append("' ");
    }

    var videoId = "r" + RenderingContext.Current.Rendering.UniqueId.ToString("N");
    
    var videoJSAttributes = sb.ToString();
}

@using (Html.ComponentContainer("flex-video"))
{
    if (Sitecore.Context.PageMode.IsExperienceEditorEditing && string.IsNullOrEmpty(mp4Url) && string.IsNullOrEmpty(webmUrl) && string.IsNullOrEmpty(oggUrl))
    {
        <div>No Video Specified. Please Configure the video component.</div>
    }
    
    <video id="@videoId" class="@videoTagCSS" @videoJSAttributes>
     @if (!string.IsNullOrEmpty(mp4Url))
     {
     <source src="@mp4Url" type='video/mp4' />
     }
     @if (!string.IsNullOrEmpty(webmUrl))
     {
     <source src="@webmUrl" type='video/webm' />
     }
     @if (!string.IsNullOrEmpty(oggUrl))
     {
     <source src="@oggUrl" type='video/ogg' />
     }
     <p class="vjs-no-js">@notSupportedMessage</p>
    </video>
}