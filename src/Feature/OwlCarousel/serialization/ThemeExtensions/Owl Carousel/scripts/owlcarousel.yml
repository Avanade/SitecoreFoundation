---
ID: "d7ce1ad9-85bc-4725-ab95-8d4a437ebd76"
Parent: "b3d3f187-5d56-4360-b321-250750fa5dae"
Template: "962b53c4-f93b-4df9-9821-415c867b8903"
Path: /sitecore/media library/Extension Themes/Owl Carousel/scripts/owlcarousel
DB: master
SharedFields:
- ID: "06d5295c-ed2f-4a54-9bf2-26228d113318"
  Hint: __Icon
  Value: "-/media/D7CE1AD985BC4725AB958D4A437EBD76.ashx?h=16&thn=1&w=16"
- ID: "40e50ed9-ba07-4702-992e-a912738d32dc"
  Hint: Blob
  BlobID: "e96b1444-7f22-4c97-a068-8fc463778ab5"
  Value: 
- ID: "6954b7c7-2487-423f-8600-436cb3b6dc0e"
  Hint: Size
  Value: 54119
- ID: "6f47a0a5-9c94-4b48-abeb-42d38def6054"
  Hint: Mime Type
  Value: "application/x-javascript"
- ID: "c06867fe-9a43-4c7d-b739-48780492d06f"
  Hint: Extension
  Value: js
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20180203T231825Z
