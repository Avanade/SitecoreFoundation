---
ID: "006c5b56-159e-4899-ad8f-8d30fd1d1c00"
Parent: "d99d721f-1db6-4a6a-aec4-4086c353c6f3"
Template: "ecba4d31-ac46-4503-b327-03005b8c947f"
Path: /sitecore/content/Starter Kit Sites/Sites/Starter Kit/Home/Features/Scripts and Styles/Content/Text/Main Content
DB: master
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20151006T231104
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\admin
    - ID: "c21ff5a7-06c2-4c71-81a4-6a5e84855047"
      Hint: Content
      Value: |
        <h1>Script and Style Management</h1>
        <h2>Approaches</h2>
        <p>Typically a Sitecore project will manage page resources within visual studio. Typical approaches leveraging a server side bundling solution like "ASP.Net Web Optimization" Bundling or "Corbos.xml". Other solutions involve a task runner like Grunt or Gulp. Both approaches require physical JavaScript and CSS files to exist on the file system and be deployed through the build process. In a typical project, this is fine.&nbsp;</p>
        <p>In a multisite solution with many simultaneous projects this can be an issue as even small changes will require a build to test, and having a support team support builds for every site deployment is not ideal. We have built a solution that allows css and javascript to be defined within Sitecore Items and Sitecore will bundle, minify and serve them. We have even integrated Azure CDN to ensure the resources are served as optimized as possible. Note that although this solution also makes it easier for content authors to edit styles, you should consider their aptitude and restrict access to these items if the author is more likely to cause issues.</p>
        <h2>Site and Page Resources</h2>
        <p>Every site can define a set of global CSS and global JavaScript resources that should be bundled and served at runtime. Every page can optionally define a set of page specific scripts and styles that would be applied right after the site scripts. Additionally you can associate styles and scripts with a "Design" content item and associate the design with a page. This gives you a lot of flexibiity in managing resources.</p>
        <p>You can include LESS syntax in your CSS files and toggle whether the resulting CSS/JS is served minified or just bundled. When not minified, both resources include comments to make it easier to troubleshoot where the source file is that could be causing issues.</p>
